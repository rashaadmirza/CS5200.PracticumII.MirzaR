dbExecute(mysql_conn, "
CREATE TABLE combined_sales (
salesID INT,
txnID INT,
rID INT,
cID INT,
pID INT,
date DATE,
qty INT
)")
# Insert the combined sales data into MySQL
dbWriteTable(mysql_conn, "combined_sales", sales_data, append = TRUE, row.names = FALSE)
# > helps to get `qty`
# ----------
# Query to extract data for sales_facts
sales_facts_query <- "
SELECT
s.salesID AS sales_facts_id,
p.pID AS pID,
d.dateID AS dateID,
c.cID AS cID,
r.rID AS rID,
p.product AS product,
d.year AS year,
d.quarter AS quarter,
d.month AS month,
c.country AS country,
r.territory AS territory,
SUM(s.qty * p.unitcost) AS total_amount,
SUM(s.qty) AS total_units
FROM combined_sales s
JOIN products_dim p ON s.pID = p.pID
JOIN customers_dim c ON s.cID = c.cID
JOIN reps_dim r ON s.rID = r.rID
JOIN dates_dim d ON DATE(s.date) = d.date
GROUP BY sales_facts_id, pID, cID, dateID, rID, product, year, quarter, month, country, territory
"
# GROUP BY p.pID, c.cID, d.dateID, r.rID, p.product, d.year, d.quarter, d.month, c.country, r.territory
# Execute the query
sales_facts_data <- suppressWarnings(dbGetQuery(mysql_conn, sales_facts_query))
# Insert the retrieved data into sales_facts table in MySQL
dbWriteTable(mysql_conn, "sales_facts", sales_facts_data, append = TRUE, row.names = FALSE)
# --------------------
# Part 2 / Task 3B / Create and populate the rep_facts table
# --------------------
# Create rep_facts table with references to dimension tables
dbExecute(mysql_conn, "DROP TABLE IF EXISTS rep_facts")
dbExecute(mysql_conn, "
CREATE TABLE rep_facts (
rep_facts_id INT PRIMARY KEY AUTO_INCREMENT,
rID INT,
sur VARCHAR(100),
first VARCHAR(100),
year INT,
quarter INT,
month INT,
total_amount DECIMAL(10, 2),
avg_amount DECIMAL(10, 2),
FOREIGN KEY (rID) REFERENCES reps_dim(rID)
)")
# ----------
# Query to extract data for rep_facts
rep_facts_query <- "
SELECT
r.rID AS rID,
r.sur AS sur,
r.first AS first,
d.year AS year,
d.quarter AS quarter,
d.month AS month,
SUM(s.qty * p.unitcost) AS total_amount,
AVG(s.qty * p.unitcost) AS avg_amount
FROM combined_sales s
JOIN reps_dim r ON s.rID = r.rID
JOIN products_dim p ON s.pID = p.pID
JOIN dates_dim d ON DATE(s.date) = d.date
GROUP BY r.rID, r.sur, r.first, d.year, d.quarter, d.month
"
# Execute the query
rep_facts_data <- suppressWarnings(dbGetQuery(mysql_conn, rep_facts_query))
# Insert the retrieved data into rep_facts table in MySQL
dbWriteTable(mysql_conn, "rep_facts", rep_facts_data, append = TRUE, row.names = FALSE)
# ----------------------------------------
# Disconnect from the databases when done
dbDisconnect(sqlite_conn)
dbDisconnect(mysql_conn)
# RStudio Console: >lapply(dbListConnections(RMySQL::MySQL()), dbDisconnect)
# ----------------------------------------
# References:
# https://www.youtube.com/watch?v=H6no78vdNUM
# https://northeastern.instructure.com/courses/180750/modules
# https://www.geeksforgeeks.org/fact-constellation-in-data-warehouse-modelling/
# https://chatgpt.com/
# https://www.databricks.com/glossary/snowflake-schema#:~:text=A%20snowflake%20schema%20is%20a,data%20marts%2C%20and%20relational%20databases.
# https://community.fabric.microsoft.com/t5/Desktop/Same-Dimensions-multiple-Fact-tables-different-measures-millions/td-p/3212805#:~:text=Given%20your%20requirements%2C%20there%20are%20a%20few%20potential%20approaches%20to%20consider.&text=Creating%20a%20star%20schema%20with,a%20bridge%20table%20where%20necessary.
# https://stackoverflow.com/questions/32139596/cannot-allocate-a-new-connection-16-connections-already-opened-rmysql
# https://www.lucidchart.com/pages/tour [ERD]
# https://www.phpmyadmin.co/index.php [Console]
# Import necessary libraries
library(DBI)
library(RSQLite)
library(RMySQL)
library(dplyr)
library(kableExtra)
library(ggplot2)
# Connect to freemysqlhosting.net MySQL database from R
db_host <- "sql5.freemysqlhosting.net"
db_name <- "sql5724225"
db_user <- "sql5724225"
db_pwd <- "5YeYbiBfvH"
db_port <- 3306
# Connect to remote server database
mysql_conn <-  dbConnect(RMySQL::MySQL(),
host = db_host,
dbname = db_name,
user = db_user,
password = db_pwd,
port = db_port)
top_products <- "
SELECT product, SUM(total_amount) AS total_revenue
FROM sales_facts
GROUP BY product
ORDER BY total_revenue DESC
LIMIT 5
"
top_products_data <- dbGetQuery(mysql_conn, top_products)
# Table
knitr::kable(top_products_data, caption = "Top 5 Products by Total Revenue (2020-2023)")
# Bar Chart for Top Five Products with the Most Sales
ggplot(top_products_data, aes(x = reorder(product, -total_revenue), y = total_revenue)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Top 5 Products by Total Revenue",
subtitle = "2020-2023",
x = "Product",
y = "Total Revenue") +
coord_flip()
revenue_units <- "
SELECT
product,
year,
quarter,
SUM(total_amount) AS total_revenue,
SUM(total_units) AS total_units_sold
FROM
sales_facts
GROUP BY
product,
year,
quarter
ORDER BY
product,
year,
quarter
"
revenue_units_data <- dbGetQuery(mysql_conn, revenue_units)
knitr::kable(revenue_units_data, caption = "Total Revenue and Units Sold per Product per Quarter")
# Bar Chart for Total Revenue per Quarter
ggplot(revenue_units_data, aes(x = interaction(year, quarter), y = total_revenue, fill = product)) +
geom_bar(stat = "identity", position = "stack") +
theme_minimal() +
labs(title = "Total Revenue per Product per Quarter",
x = "Year-Quarter",
y = "Total Revenue",
fill = "Product") +
scale_x_discrete(labels = function(x) gsub("\\.", " Q", x)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Line Chart for Total Units Sold per Quarter
ggplot(revenue_units_data, aes(x = interaction(year, quarter), y = total_units_sold, color = product, group = product)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Total Units Sold per Product per Quarter",
x = "Year-Quarter",
y = "Total Units Sold",
color = "Product") +
scale_x_discrete(labels = function(x) gsub("\\.", " Q", x)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
revenue_country <- "
SELECT
product,
country,
SUM(total_amount) AS total_revenue
FROM
sales_facts
GROUP BY
product,
country
ORDER BY
product,
country
"
revenue_country_data <- dbGetQuery(mysql_conn, revenue_country)
ggplot(revenue_country_data, aes(x = country, y = total_revenue, group = product, color = product)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
labs(title = "Total Revenue per Product per Country",
x = "Country",
y = "Total Revenue",
color = "Product") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::dollar) +
scale_color_brewer(palette = "Set1")
avg_sales <- "
SELECT
rID,
sur,
first,
year,
quarter,
AVG(total_amount) AS avg_sales
FROM
rep_facts
GROUP BY
rID,
sur,
first,
year,
quarter
ORDER BY
year,
quarter,
avg_sales DESC
"
avg_sales_data <- dbGetQuery(mysql_conn, avg_sales)
avg_sales_data %>%
kable("html", caption = "Average Sales per Sales Rep per Quarter") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F) %>%
column_spec(1, bold = TRUE, color = "white", background = "#3c8dbc") %>%
column_spec(6, bold = TRUE, color = "white", background = "#00a65a")
# Disconnect from the database when done
dbDisconnect(mysql_conn)
# ----------------------------------------
# BUILD: Practicum II (Summer 2024) / Mine a Database
# Rashaad Mohammed Mirza
# Part 1: Create Analytics Database and Load XML Data
# mirza.ra@northeastern.edu
# Summer Full 2024
# CS5200 Dr. Martin Schedlbauer
# Northeastern University
# Date: August 6, 2024
# ----------------------------------------
# Load required packages
library(DBI)
library(RSQLite)
library(XML)
library(dplyr)
# ----------------------------------------
# Part 1 / Tasks 1 and 2
# ----------------------------------------
# Created an R Project named CS5200.PracticumII.MirzaR and an R Script called LoadXML2DB.MirzaR.R.
# Downloaded and uncompressed the pharma-sales-v3.zip file, saving the XML files in the txn-xml subfolder for inspection.
# ----------------------------------------
# Part 1 / Task 3
# ----------------------------------------
# Please refer to the attached ERD diagram and the table creation script provided in Task 4 below that outlines the SQL commands used to create the corresponding tables as specified in the ERD.
# ----------------------------------------
# Part 1 / Task 4
# ----------------------------------------
# Create an SQLite database
conn <- dbConnect(RSQLite::SQLite(), dbname = "pharma_sales.db")
# Create products table
dbExecute(conn, "PRAGMA foreign_keys = OFF;")
dbExecute(conn, "DROP TABLE IF EXISTS products")
dbExecute(conn, "PRAGMA foreign_keys = ON;")
dbExecute(conn, "
CREATE TABLE products (
pID INTEGER PRIMARY KEY AUTOINCREMENT,
product VARCHAR(255),
unitcost DECIMAL(10, 2),
currency VARCHAR(10)
)
")
# Create reps table
dbExecute(conn, "PRAGMA foreign_keys = OFF;")
dbExecute(conn, "DROP TABLE IF EXISTS reps")
dbExecute(conn, "PRAGMA foreign_keys = ON;")
dbExecute(conn, "
CREATE TABLE reps (
rID INTEGER PRIMARY KEY,
sur VARCHAR(100),
first VARCHAR(100),
phone VARCHAR(50),
hiredate DATE,
commission DECIMAL(10, 2),
territory VARCHAR(50),
certified BOOLEAN DEFAULT 0
)
")
# Create customers table
dbExecute(conn, "PRAGMA foreign_keys = OFF;")
dbExecute(conn, "DROP TABLE IF EXISTS customers")
dbExecute(conn, "PRAGMA foreign_keys = ON;")
dbExecute(conn, "
CREATE TABLE customers (
cID INTEGER PRIMARY KEY AUTOINCREMENT,
customer VARCHAR(255),
country VARCHAR(100)
)
")
# Create sales table
dbExecute(conn, "DROP TABLE IF EXISTS sales")
dbExecute(conn, "
CREATE TABLE sales (
salesID INTEGER PRIMARY KEY AUTOINCREMENT,
txnID INTEGER,
rID INTEGER,
cID INTEGER,
pID INTEGER,
date DATE,
qty INTEGER,
FOREIGN KEY (rID) REFERENCES reps(rID),
FOREIGN KEY (cID) REFERENCES customers(cID),
FOREIGN KEY (pID) REFERENCES products(pID)
)
")
# If PRIMARY KEY (txnID, rID): Error: UNIQUE constraint failed: sales.txnID, sales.rID
# ----------------------------------------
# Part 1 / Tasks 5 and 6 / Extract
# ----------------------------------------
# List all files in the txn-xml folder
files <- list.files("txn-xml", pattern = "xml$", full.names = TRUE)
print(files)
# Separate files by type
reps_files <- grep("pharmaReps", files, value = TRUE)
txn_files <- grep("pharmaSalesTxn", files, value = TRUE)
# Initialize an empty list to store individual salesrep data frames
reps_list <- list()
for (file in reps_files) {
# Parse the XML file
xml_data <- xmlParse(file)
reps <- getNodeSet(xml_data, "//salesreps")
print(reps)
}
# Load sales reps data by iterating through each XML file in reps_files
for (file in reps_files) {
# Parse the XML file
xml_data <- xmlParse(file)
# Use XPath to locate the rep nodes
reps <- getNodeSet(xml_data, "//salesreps//rep")
# Loop through each representative and extract relevant data
for (rep in reps) {
rID <- xmlGetAttr(rep, "rID")
sur <- xmlValue(rep[["demo"]][["sur"]])
first <- xmlValue(rep[["demo"]][["first"]])
phone <- xmlValue(rep[["demo"]][["phone"]])
hiredate <- xmlValue(rep[["demo"]][["hiredate"]])
commission <- as.numeric(sub("%", "", xmlValue(rep[["commission"]]))) / 100
territory <- xmlValue(rep[["territory"]])
certified <- xmlValue(rep[["certified"]])
# Create a data frame for this representative
rep_data <- data.frame(
rID = rID,
sur = sur,
first = first,
phone = phone,
hiredate = as.Date(hiredate, format="%b %d %Y"),
commission = commission,
territory = territory,
certified = ifelse(certified == "", NA, certified),
stringsAsFactors = FALSE
)
# Add to the list
reps_list <- append(reps_list, list(rep_data))
}
}
# Combine all individual representative data frames into one
reps_data <- bind_rows(reps_list)
print(str(reps_data))
# ----------------------------------------
# Initialize an empty list to store individual transaction data frames
txn_list <- list()
# Load sales transactions data by iterating through each XML file in txn_files
for (file in txn_files) {
# Parse the XML file
xml_data <- xmlParse(file)
# Use XPath to locate the txn nodes
trxns <- getNodeSet(xml_data, "//txns//txn")
# Loop through each transaction and extract relevant data
for (txn in trxns) {
txnID <- xmlGetAttr(txn, "txnID")
rID <- xmlGetAttr(txn, "repID")
customer <- xmlValue(txn[["customer"]])
country <- xmlValue(txn[["country"]])
date <- xmlValue(txn[["sale"]][["date"]])
product <- xmlValue(txn[["sale"]][["product"]])
unitcost <- as.numeric(xmlValue(txn[["sale"]][["unitcost"]]))
currency <- xmlGetAttr(txn[["sale"]][["unitcost"]], "currency")
qty <- as.integer(xmlValue(txn[["sale"]][["qty"]]))
# Create a data frame for this transaction
txn_data <- data.frame(
txnID = txnID,
rID = rID,
customer = customer,
country = country,
date = date,
product = product,
unitcost = unitcost,
currency = currency,
qty = qty,
stringsAsFactors = FALSE
)
# Add to the list
txn_list <- append(txn_list, list(txn_data))
}
}
# Combine all individual transaction data frames into one
txn_data <- bind_rows(txn_list)
print(str(txn_data))
# ----------------------------------------
# Part 1 / Task 6 / Transform and Load
# ----------------------------------------
# reps_data transformations
new_reps_data <- reps_data
new_reps_data$rID <- as.numeric(sub("r", "", new_reps_data$rID))
new_reps_data$hiredate <- as.Date(new_reps_data$hiredate, format = "%b %d %Y")
new_reps_data$hiredate <- format(new_reps_data$hiredate, "%m/%d/%Y")
# txn_data transformations
new_txn_data <- txn_data
new_txn_data$date <- as.Date(new_txn_data$date, format = "%m/%d/%Y")
new_txn_data$date <- format(new_txn_data$date, "%m/%d/%Y")
# This is done to ensure that all date entries are uniformly recognized and processed as Date objects. This step standardizes the date format to MM/DD/YYYY for consistency in further analysis and reporting.
# Insert data into reps table
dbWriteTable(conn, "reps", new_reps_data, append = TRUE, row.names = FALSE)
# Insert data into products table
products_data <- new_txn_data[, c('product', 'unitcost', 'currency')]
products_data <- unique(products_data)
dbWriteTable(conn, "products", products_data, append = TRUE, row.names = FALSE)
# Insert data into customers table
customers_data <- new_txn_data[, c('customer', 'country')]
customers_data <- unique(customers_data)
dbWriteTable(conn, "customers", customers_data, append = TRUE, row.names = FALSE)
# Insert data into sales table
# Step 1: Map customer names to cID
customers_map <- dbReadTable(conn, "customers")
sales_data <- merge(new_txn_data, customers_map, by.x = "customer", by.y = "customer")
sales_data <- sales_data[, c('txnID', 'rID', 'cID', 'product', 'date', 'qty')]
# Step 2: Map product names to pID
products_map <- dbReadTable(conn, "products")
sales_data <- merge(sales_data, products_map, by.x = "product", by.y = "product")
sales_data <- sales_data[, c('txnID', 'rID', 'cID', 'pID', 'date', 'qty')]
# Step 3: Insert the final sales_data into the sales table
dbWriteTable(conn, "sales", sales_data, append = TRUE, row.names = FALSE)
# Reference: https://www.geeksforgeeks.org/how-to-merge-two-dataframes-in-r/#
# ----------------------------------------
# Part 1 / Task 7
# ----------------------------------------
dbExecute(conn, "DROP TABLE IF EXISTS new_sales")
dbExecute(conn, "CREATE TABLE new_sales AS SELECT * FROM sales")
dbExecute(conn, "
UPDATE new_sales
SET date = substr(date, 7, 4) || '-' || substr(date, 1, 2) || '-' || substr(date, 4, 2)
WHERE date IS NOT NULL AND date <> ''
")
# The date values in the sales table are in the format MM/DD/YYYY, which is not directly recognized by SQLite's strftime() function for extracting the year. SQLite expects dates in the YYYY-MM-DD format to correctly parse and manipulate them. Hence, the above.
# Extract unique years from the new_sales table after date format conversion
unique_years <- dbGetQuery(conn, "SELECT DISTINCT strftime('%Y', date) AS year FROM new_sales")
print(unique_years)
# Create year-specific tables and insert data
for (year in unique_years$year) {
# Create a new table for each year
table_name <- paste0("sales_", year)
# Reference: https://stackoverflow.com/questions/7201341/how-can-two-strings-be-concatenated
# Drop the table if it already exists
drop_table_query <- paste0("DROP TABLE IF EXISTS ", table_name)
dbExecute(conn, drop_table_query)
# Query to create a new table for this year
create_table <- paste0("
CREATE TABLE ", table_name, " (
salesID INTEGER PRIMARY KEY AUTOINCREMENT,
txnID INTEGER,
rID INTEGER,
cID INTEGER,
pID INTEGER,
date DATE,
qty INTEGER,
FOREIGN KEY (rID) REFERENCES reps(rID),
FOREIGN KEY (cID) REFERENCES customers(cID),
FOREIGN KEY (pID) REFERENCES products(pID)
)
")
dbExecute(conn, create_table)
# Insert the relevant data into the year-specific table
insert_data <- paste0("
INSERT INTO ", table_name, "
SELECT * FROM new_sales WHERE strftime('%Y', date) = '", year, "'
")
dbExecute(conn, insert_data)
}
# Drop the original sales table
dbExecute(conn, "DROP TABLE new_sales")
dbExecute(conn, "DROP TABLE sales")
# ----------------------------------------
# Part 1 / Task 8
# ----------------------------------------
# Code is modularized into functions, structured for readability and maintainability. Proper programming practices are followed, with thorough commenting, and header information including name, course, and date is provided at the top of the script.
# ----------------------------------------
# Disconnect from the database when done
dbDisconnect(conn)
# ----------------------------------------
# References:
# https://www.youtube.com/watch?v=H6no78vdNUM
# https://northeastern.instructure.com/courses/180750/modules
# https://www.geeksforgeeks.org/fact-constellation-in-data-warehouse-modelling/
# https://chatgpt.com/
# https://www.databricks.com/glossary/snowflake-schema#:~:text=A%20snowflake%20schema%20is%20a,data%20marts%2C%20and%20relational%20databases.
# https://community.fabric.microsoft.com/t5/Desktop/Same-Dimensions-multiple-Fact-tables-different-measures-millions/td-p/3212805#:~:text=Given%20your%20requirements%2C%20there%20are%20a%20few%20potential%20approaches%20to%20consider.&text=Creating%20a%20star%20schema%20with,a%20bridge%20table%20where%20necessary.
# https://stackoverflow.com/questions/32139596/cannot-allocate-a-new-connection-16-connections-already-opened-rmysql
# https://www.lucidchart.com/pages/tour [ERD]
# https://www.phpmyadmin.co/index.php [Console]
